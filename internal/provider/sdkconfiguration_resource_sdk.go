// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"speakeasy/internal/sdk/pkg/models/shared"
)

func (r *SDKConfigurationResourceModel) ToCreateSDKType() *shared.GenerationConfigurationRequest {
	apiKey := r.APIKey.ValueString()
	apiID := new(string)
	if !r.Configuration.APIID.IsUnknown() && !r.Configuration.APIID.IsNull() {
		*apiID = r.Configuration.APIID.ValueString()
	} else {
		apiID = nil
	}
	isMonorepo := new(bool)
	if !r.Configuration.IsMonorepo.IsUnknown() && !r.Configuration.IsMonorepo.IsNull() {
		*isMonorepo = r.Configuration.IsMonorepo.ValueBool()
	} else {
		isMonorepo = nil
	}
	repoSetup := new(shared.GenerationConfigurationRepoSetup)
	if !r.Configuration.RepoSetup.IsUnknown() && !r.Configuration.RepoSetup.IsNull() {
		*repoSetup = shared.GenerationConfigurationRepoSetup(r.Configuration.RepoSetup.ValueString())
	} else {
		repoSetup = nil
	}
	repoURL := new(string)
	if !r.Configuration.RepoURL.IsUnknown() && !r.Configuration.RepoURL.IsNull() {
		*repoURL = r.Configuration.RepoURL.ValueString()
	} else {
		repoURL = nil
	}
	schemaAuth := new(string)
	if !r.Configuration.SchemaAuth.IsUnknown() && !r.Configuration.SchemaAuth.IsNull() {
		*schemaAuth = r.Configuration.SchemaAuth.ValueString()
	} else {
		schemaAuth = nil
	}
	schemaURL := new(string)
	if !r.Configuration.SchemaURL.IsUnknown() && !r.Configuration.SchemaURL.IsNull() {
		*schemaURL = r.Configuration.SchemaURL.ValueString()
	} else {
		schemaURL = nil
	}
	versionID := new(string)
	if !r.Configuration.VersionID.IsUnknown() && !r.Configuration.VersionID.IsNull() {
		*versionID = r.Configuration.VersionID.ValueString()
	} else {
		versionID = nil
	}
	workspaceID := new(string)
	if !r.Configuration.WorkspaceID.IsUnknown() && !r.Configuration.WorkspaceID.IsNull() {
		*workspaceID = r.Configuration.WorkspaceID.ValueString()
	} else {
		workspaceID = nil
	}
	configuration := shared.GenerationConfiguration{
		APIID:       apiID,
		IsMonorepo:  isMonorepo,
		RepoSetup:   repoSetup,
		RepoURL:     repoURL,
		SchemaAuth:  schemaAuth,
		SchemaURL:   schemaURL,
		VersionID:   versionID,
		WorkspaceID: workspaceID,
	}
	out := shared.GenerationConfigurationRequest{
		APIKey:        apiKey,
		Configuration: configuration,
	}
	return &out
}

func (r *SDKConfigurationResourceModel) ToUpdateSDKType() *shared.GenerationConfigurationRequest {
	out := r.ToCreateSDKType()
	return out
}

func (r *SDKConfigurationResourceModel) ToDeleteSDKType() *shared.GenerationConfigurationRequest {
	out := r.ToCreateSDKType()
	return out
}
