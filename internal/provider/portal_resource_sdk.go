// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	"speakeasy/internal/sdk/pkg/models/shared"
)

func (r *PortalResourceModel) ToCreateSDKType() *shared.PortalSettings {
	callbackURL := new(string)
	if !r.CallbackURL.IsUnknown() && !r.CallbackURL.IsNull() {
		*callbackURL = r.CallbackURL.ValueString()
	} else {
		callbackURL = nil
	}
	docsLink := new(string)
	if !r.DocsLink.IsUnknown() && !r.DocsLink.IsNull() {
		*docsLink = r.DocsLink.ValueString()
	} else {
		docsLink = nil
	}
	enabled := r.Enabled.ValueBool()
	primaryColor := new(string)
	if !r.PrimaryColor.IsUnknown() && !r.PrimaryColor.IsNull() {
		*primaryColor = r.PrimaryColor.ValueString()
	} else {
		primaryColor = nil
	}
	secondaryColor := new(string)
	if !r.SecondaryColor.IsUnknown() && !r.SecondaryColor.IsNull() {
		*secondaryColor = r.SecondaryColor.ValueString()
	} else {
		secondaryColor = nil
	}
	subdomain := new(string)
	if !r.Subdomain.IsUnknown() && !r.Subdomain.IsNull() {
		*subdomain = r.Subdomain.ValueString()
	} else {
		subdomain = nil
	}
	supportLink := new(string)
	if !r.SupportLink.IsUnknown() && !r.SupportLink.IsNull() {
		*supportLink = r.SupportLink.ValueString()
	} else {
		supportLink = nil
	}
	title := new(string)
	if !r.Title.IsUnknown() && !r.Title.IsNull() {
		*title = r.Title.ValueString()
	} else {
		title = nil
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.PortalSettings{
		CallbackURL:    callbackURL,
		DocsLink:       docsLink,
		Enabled:        enabled,
		PrimaryColor:   primaryColor,
		SecondaryColor: secondaryColor,
		Subdomain:      subdomain,
		SupportLink:    supportLink,
		Title:          title,
		WorkspaceID:    workspaceID,
	}
	return &out
}

func (r *PortalResourceModel) ToUpdateSDKType() *shared.PortalSettings {
	out := r.ToCreateSDKType()
	return out
}

func (r *PortalResourceModel) ToDeleteSDKType() *shared.PortalSettings {
	out := r.ToCreateSDKType()
	return out
}

func (r *PortalResourceModel) RefreshFromCreateResponse(resp *shared.PortalSettings) {
	if resp.CallbackURL != nil {
		r.CallbackURL = types.StringValue(*resp.CallbackURL)
	} else {
		r.CallbackURL = types.StringNull()
	}
	if resp.DocsLink != nil {
		r.DocsLink = types.StringValue(*resp.DocsLink)
	} else {
		r.DocsLink = types.StringNull()
	}
	r.Enabled = types.BoolValue(resp.Enabled)
	if resp.PrimaryColor != nil {
		r.PrimaryColor = types.StringValue(*resp.PrimaryColor)
	} else {
		r.PrimaryColor = types.StringNull()
	}
	if resp.SecondaryColor != nil {
		r.SecondaryColor = types.StringValue(*resp.SecondaryColor)
	} else {
		r.SecondaryColor = types.StringNull()
	}
	if resp.Subdomain != nil {
		r.Subdomain = types.StringValue(*resp.Subdomain)
	} else {
		r.Subdomain = types.StringNull()
	}
	if resp.SupportLink != nil {
		r.SupportLink = types.StringValue(*resp.SupportLink)
	} else {
		r.SupportLink = types.StringNull()
	}
	if resp.Title != nil {
		r.Title = types.StringValue(*resp.Title)
	} else {
		r.Title = types.StringNull()
	}
	r.WorkspaceID = types.StringValue(resp.WorkspaceID)
}

func (r *PortalResourceModel) RefreshFromUpdateResponse(resp *shared.PortalSettings) {
	r.RefreshFromCreateResponse(resp)
}
